---
title: Using Pivotal Developer Console to Provide Services
owner: Marketplace
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %> (<%= vars.product_abbr %>) to provide services to
app teams and isolate different `Projects`.

## <a id='overview'></a> Overview

A `Project` is a Kubernetes custom resource definition (CRD) that is used to manage the isolation
of <%= vars.product_abbr %> services and entities in a Kubernetes cluster.
Operators are then able to add or remove app team members to and from these projects as required.

The entities in a `Project` map can be any of the base Kubernetes entities -- `Users`, `Groups`, and
`ServiceAccounts`.

## <a id='config-projects'></a> Configuring Projects

You can configure `Projects` by posting YAML to the Kubernetes API of your cluster.
This topic demonstrates this with the Kubernetes command line tool, kubectl, which is one of several
means of communicating with the API.
To create a new `Project`:

1. Create a file called `project.yaml` anywhere on your local machine.
1. Copy and paste the contents below into the file.
1. Replace the placeholders with real values and save the file.

    ```yaml
    apiVersion: developerconsole.pivotal.io/v1
    kind: Project
    metadata:
      name: PROJECT-NAME
    spec:
      access:
      - kind: TYPE
        name: NAME
    ```

    Where:
    * `PROJECT-NAME` is the name of the new project. This must not match an existing Kubernetes `namespace`.
    * `TYPE` is a `User` or `Group`.
    * `NAME` is the name of the user or group that you want to give access to <%= vars.product_abbr %> resources
    within the new `Project`.

    <p class="note">
      <strong>Note:</strong> In the <code>Project</code> YAML format, <code>spec.access</code> is an array and
      can therefore include multiple users or groups.
    </p>

1. Apply the configuration by running:

    ```
      kubectl create -f project.yaml
    ```

## <a id='register-broker'></a> Register a Broker

You can register any Open Service Broker API (OSBAPI)-compliant brokers with the <%= vars.product_abbr %> CLI
tool.

1. Register the broker by running:

    ```
      pdc broker register --name=BROKER-NAME --url=BROKER-URL --username=BROKER-USERNAME--password=BROKER-PASSWORD
    ```

    Where:
    * `BROKER-NAME` is the name of the newly registered broker
    * `BROKER-URL` is the location of the broker API endpoint
    * `BROKER-USERNAME` is the username by which <%= vars.product_abbr %> authenticates with the broker
    * `BROKER-PASSWORD` is the password by which <%= vars.product_abbr %> authenticates with the broker

1. Check that the broker was registered by running:

    ```
      pdc broker list
    ```

    This returns a list of registered brokers, as in the example below:

    <pre class="terminal">
      $ pdc broker list
      NAME          URL          STATUS    CREATED AT
      BROKER-NAME   BROKER-URL   created   2019-02-31 12:00:00 +0000 GMT
    </pre>

## <a id='examine-broker'></a> (Optional) Examine a Broker

To examine a specific broker:

1. Run:

    ```
    pdc broker get --name=BROKER-NAME
    ```

    For example:

    <pre class="terminal">
    $ pdc broker get --name=my-broker
    createdAt: 2019-02-31 12:00:00 +0000 GMT
    name: my-broker
    status:
      message: Successfully fetched catalog entries from broker.
      state: created
    </pre>

## <a id="feedback"></a> Feedback

<%= partial vars.path_to_partials + '/developer-console/alpha-feedback' %>
