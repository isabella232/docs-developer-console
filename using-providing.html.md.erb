---
title: Using Pivotal Developer Console to Provide Services
owner: Marketplace
---

<strong><%= modified_date %></strong>

<%# is the purpose of this topic to provide info for Alanas on how to use PDC? %>
This topic describes how to use <%= vars.product_full %> (<%= vars.product_abbr %>) to provide services to app
teams <%# Must we say "app team" instead of "developers"? %> and isolate different `Projects`.

## <a id='overview'></a> Overview

A `Project` is a Kubernetes custom resource definition (CRD) that is used to manage the isolation <%# Can we be more specific? Maybe bullet point all the things? %>
of <%= vars.product_abbr %> services and entities in a Kubernetes cluster.
The entities in a `Project` map can be any of the base Kubernetes entities -- `Users`, `Groups`, and
`ServiceAccounts`.

## <a id='config-projects'></a> Configuring Projects

You can configure `Projects` by posting YAML to the Kubernetes API of your cluster.
This topic demonstrates this with the Kubernetes command line tool, kubectl, which is one of several
means of communicating with the API.
To create a new `Project`:

1. Create a file called `project.yaml` anywhere on your local machine. <%# Check the file name and location -- these are Richard's guesses. %>
1. Copy and paste the contents below into the file.
1. Replace the placeholders with real values and save the file.

    ```yaml
    apiVersion: developerconsole.pivotal.io/v1
    kind: Project
    metadata:
      name: PROJECT-NAME
    spec:
      access:
      - kind: ENTITY-TYPE
        name: ENTITY-NAME
        namespace: ENTITY-NAMESPACE
    ```

    Where:
    * `PROJECT-NAME` is the name of the new project. This must not match an existing Kubernetes `namespace`.
    * `ENTITY-TYPE` is a `User`, `Group`, or `ServiceAccount`.
    * `ENTITY-NAME` is the name of the entity that you want to access <%= vars.product_abbr %> resources
    within the new project. <%# What's "within the new project"? The entity, the resources, or both? %>
    * `ENTITY-NAMESPACE` is the `namespace` of the `ServiceAccount` being granted access. This is only required for
    `ServiceAccount` type entities.

    <p class="note">
      <strong>Note:</strong> In the <code>Project</code> YAML format, <code>spec.access</code> is an array and
      can therefore include multiple entity entries. <%# Can we shorten "entity entries" to just "entities?" %>
    </p>

1. Apply the configuration by running:

    ```
      kubectl create -f project.yaml
    ```

## <a id='register-broker'></a> Register a Broker

You can register any Open Service Broker API (OSBAPI)-compliant brokers with the <%= vars.product_abbr %> CLI
tool.

1. Register the broker by running:

    ```
      pdc broker register --name=BROKER-NAME --url=BROKER-URL --username=BROKER-USERNAME--password=BROKER-PASSWORD
    ```

    Where:
    * `BROKER-NAME` is the name of the newly registered broker
    * `BROKER-URL` is the location of the broker API endpoint
    * `BROKER-USERNAME` is the username by which <%= vars.product_abbr %> authenticates with the broker
    * `BROKER-PASSWORD` is the password by which <%= vars.product_abbr %> authenticates with the broker

1. Check that the broker was registered by running:

    ```
      pdc broker list
    ```

    This returns a list of registered brokers, as in the example below:

    <pre class="terminal">
      $ pdc broker list
      NAME          URL          STATUS    CREATED AT
      BROKER-NAME   BROKER-URL   created   2019-02-31 12:00:00 +0000 GMT
    </pre>

## <a id='examine-broker'></a> (Optional) Examine a Broker <%# Is this within scope? Is it just "nice to know"? %>

To examine a specific broker:

1. Run:

    ```
    pdc broker get --name=BROKER-NAME
    ```

    For example:

    <%# need example without placeholder %>
    <pre class="terminal">
    $ pdc broker get --name=BROKER-NAME
    createdAt: 2019-02-31 12:00:00 +0000 GMT
    name: BROKER-NAME
    status:
      message: Successfully fetched catalog entries from broker.
      state: created
    </pre>
