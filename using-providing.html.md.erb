---
title: Using Pivotal Developer Console to Provide Services
owner: Marketplace
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %> (<%= vars.product_abbr %>) to provide services to
app teams, how to provide isolation of resources via projects and how to register Cloud Foundry instances.

## <a id='overview'></a> Overview

A project is a Kubernetes custom resource definition (CRD) that isolates <%= vars.product_short %> service
instances and bindings within a Kubernetes cluster.
Operators are then able to add or remove app team members to and from these projects as required.

The entities in a project map can be any of the base Kubernetes entities -- users, groups, and
ServiceAccounts.

In order to allow app teams to bind service instances to their apps that are
running in Cloud Foundry, you must first register the Cloud Foundry in <%=
vars.product_short %>.

## <a id='config-projects'></a> Configuring Projects

You can configure projects by posting YAML to the Kubernetes API of your cluster.
This topic demonstrates this with the Kubernetes command line interface (CLI) tool, kubectl, which is one of
several means of communicating with the API.
To create a new project:

1. Create a file called `project.yaml` anywhere on your local machine.
1. Copy and paste the contents below into the file.

    ```yaml
    apiVersion: developerconsole.pivotal.io/v1
    kind: Project
    metadata:
      name: PROJECT-NAME
    spec:
      access:
      - kind: TYPE
        name: NAME
    ```

    Where:
    * `PROJECT-NAME` is the name of the new project. This must not match an existing Kubernetes namespace.
    * `TYPE` is a user or group.
    * `NAME` is the name of the user or group that you want to give access to <%= vars.product_short %>
    resources within the new project.

1. Replace the placeholders with real values and save the file.

    <p class="note">
      <strong>Note:</strong> In the project YAML format, <code>spec.access</code> is an array and
      can therefore include multiple users or groups.
    </p>

1. Apply the configuration by running:

    ```
      kubectl create -f project.yaml
    ```

## <a id='register-cfs'></a> Registering Cloud Foundries

You can register Cloud Foundry deployments by posting YAML to the Kubernetes API of your cluster.
This topic demonstrates this with the Kubernetes command line interface (CLI) tool, kubectl, which is one of
several means of communicating with the API.
To create register a new Cloud Foundry:

1. Create a file called `cf.yaml` anywhere on your local machine.
1. Copy and paste the contents below into the file.

    ```yaml
    apiVersion: developerconsole.pivotal.io/v1alpha1
    kind: CloudFoundry
    metadata:
      name: CLOUDFOUNDRY-NAME
    spec:
      api: https://CLOUDFOUNDRY-API
    ```

    Where:
    * `CLOUDFOUNDRY-NAME` is the name of the Cloud Foundry deployment you are registering. This can be anything you like.
    * `CLOUDFOUNDRY-API` is the API endpoint of the Cloud Foundry. Note that the API endpoint must be accessible over the network from your cluster.

1. Replace the placeholders with real values and save the file.

    <p class="note">
      <strong>Note:</strong> You must configure an admin client in the Cloud Foundry UAA, see [Create Cloud Foundry UAA client](#create-cf-uaa-client).
    </p>

1. Apply the configuration by running:

    ```
      kubectl create -f cf.yaml
    ```

## <a id='register-broker'></a> Register a Broker

You can register any Open Service Broker API (OSBAPI)-compliant brokers with the <%= vars.product_abbr %> CLI
tool.

1. Register the broker by running:

    ```
      pdc broker register --name=BROKER-NAME --url=BROKER-URL --username=BROKER-USERNAME--password=BROKER-PASSWORD
    ```

    Where:
    * `BROKER-NAME` is the name of the newly registered broker
    * `BROKER-URL` is the location of the broker API endpoint
    * `BROKER-USERNAME` is the username by which <%= vars.product_short %> authenticates with the broker
    * `BROKER-PASSWORD` is the password by which <%= vars.product_short %> authenticates with the broker

1. Check that the broker was registered by running:

    ```
      pdc broker list
    ```

    This returns a list of registered brokers, as in the example below:

    <pre class="terminal">
      $ pdc broker list
      NAME          URL          STATUS    CREATED AT
      BROKER-NAME   BROKER-URL   created   2019-02-31 12:00:00 +0000 GMT
    </pre>

## <a id='examine-broker'></a> (Optional) Examine a Broker

To examine a specific broker:

1. Run:

    ```
    pdc broker get --name=BROKER-NAME
    ```

    For example:

    <pre class="terminal">
    $ pdc broker get --name=my-broker
    createdAt: 2019-02-31 12:00:00 +0000 GMT
    name: my-broker
    status:
      message: Successfully fetched catalog entries from broker.
      state: created
    </pre>

## <a id="feedback"></a> Feedback

<%= partial vars.path_to_partials + '/developer-console/alpha-feedback' %>
