---
title: Using Developer Console to Provide Services
owner: Marketplace
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %> to provide
services to app teams, how to provide isolation of resources through projects, and how to register
Cloud Foundry deployments.

## <a id='overview'></a> Overview

A project is a Kubernetes custom resource definition (CRD) that isolates <%= vars.product_short %>
service instances and bindings within a Kubernetes cluster.
Operators are then able to add or remove app team members to and from these projects as required.

The entities in a project map can be any of the base Kubernetes entities -- users, groups, and
ServiceAccounts.

To enable app teams to bind service instances to apps that are running in Cloud Foundry, you must
first register the Cloud Foundry deployment in <%= vars.product_short %>.

## <a id='config-projects'></a> Configure a Project

You can configure projects by posting YAML to the Kubernetes API of your cluster.
This topic explains how to do this using the Kubernetes command line interface tool (kubectl).
Kubectl is one of several ways to communicate with the API.

To create a new project:

1. Create a file called `project.yaml` anywhere on your local machine.
1. Add the code snippet below to the file:

    ```yaml
    apiVersion: projects.vmware.com/v1alpha1
    kind: Project
    metadata:
      name: PROJECT-NAME
    spec:
      access:
      - kind: TYPE
        name: NAME
        namespace: NAMESPACE
    ```

    Where:
    * `PROJECT-NAME` is the name of the new project. This must not match an existing Kubernetes namespace.
    * `TYPE` is a User, Group or ServiceAccount.
    * `NAME` is the name of the user, group or service account that you want to give access to.
    * `NAMESPACE` required only when using ServiceAccount. The namespace of the ServiceAccount.
    <%= vars.product_short %> resources within the new project.

    <p class="note">
      <strong>Note:</strong> In the project YAML format, <code>spec.access</code> is an array and
      can therefore include multiple users or groups.
    </p>

1. Apply the configuration by running:

    ```
    kubectl create -f project.yaml
    ```

## <a id='register-cfs'></a> Register a Cloud Foundry Deployment

You can register a Cloud Foundry deployment by posting YAML to the Kubernetes API of your cluster.
This topic demonstrates this with kubectl, which is one of several ways to communicate with the API.

<p class="note">
  <strong>Note:</strong> You must have an admin client configured in the Cloud Foundry
  User Authentication and Authorization (UAA) to give <%= vars.product_short %> permission to create
  and bind services in your Cloud Foundry deployment.
  For more information, see
  <a href="./installing.html#create-cf-uaa-client">Create Cloud Foundry UAA client</a>.
</p>

To register a new Cloud Foundry deployment:

1. Encode your Cloud Foundry UAA client and secret by running:

    ```
    echo "developerconsole" | base64
    echo "CLIENT-SECRET" | base64
    ```
    Where `CLIENT-SECRET` is the UAA client secret you created in
    [Create a Cloud Foundry UAA Client](./installing.html#create-cf-uaa-client).

    Record the output of the above commands.

1. Create a file called `cf-secret.yaml` on your local machine.
1. Add the code snippet below to the file:

    ```yaml
    apiVersion: v1
    kind: Secret
    type: kubernetes.io/opaque
    metadata:
      name: CLOUD-FOUNDRY-SECRET-NAME
      namespace: pdc-system
    data:
      clientID: ENCODED-CLIENT-ID
      clientSecret: ENCODED-CLIENT-SECRET
    ```

    Where:
    * `CLOUD-FOUNDRY-SECRET-NAME` is a name you give the secret for the Cloud Foundry deployment you are registering.
    * `ENCODED-CLIENT-ID` is the base64-encoded client ID that you copied in the above step.
    * `ENCODED-CLIENT-SECRET` is the base64-encoded client secret that you copied in the above step.

1. Create a file called `cf.yaml` on your local machine.
1. Add the code snippet below to the file:

    ```yaml
    apiVersion: developerconsole.vmware.com/v1alpha1
    kind: CloudFoundryAPI
    metadata:
      name: CLOUD-FOUNDRY-NAME
    spec:
      api: https://CLOUD-FOUNDRY-API
      skipSSLValidation: SKIP-SSL-VALIDATION
      secretRef:
        name: CLOUD-FOUNDRY-SECRET-NAME
        namespace: pdc-system
    ```

    Where:
    * `CLOUD-FOUNDRY-NAME` is the name of the Cloud Foundry deployment you are registering.
    * `CLOUD-FOUNDRY-API` is the API endpoint of the Cloud Foundry deployment. The API endpoint must
    be accessible over the network from your cluster.
    * `CLOUD-FOUNDRY-SECRET-NAME` is the name of the secret as provided in the previous step.
    * `SKIP-SSL-VALIDATION` is a boolean value you can set to `true` to skip SSL validation when communicating
    with the Cloud Foundry deployment. The default value is `false`.

1. Apply the configuration by running:

    ```
      kubectl create -f cf-secret.yaml
      kubectl create -f cf.yaml
    ```

### <a id='space-entitlement'></a> Create a Space Entitlement

To interact with resources within a Cloud Foundry space, project members must receive explicit access
through a Cloud Foundry space entitlement.

To create a new Cloud Foundry space entitlement:

1. Create a file called `cf-space-entitlement.yaml` on your local machine.
1. Add the code snippet below to the file:

    ```yaml
    apiVersion: developerconsole.vmware.com/v1alpha1
    kind: CloudFoundrySpaceEntitlement
    metadata:
      name: CLOUD-FOUNDRY-SPACE-ENTITLEMENT-NAME
    spec:
      namespace: PROJECT-NAME
      cloudFoundryAPIRef:
        name: CLOUD-FOUNDRY-NAME
      org: ORG-NAME
      space: SPACE-NAME
    ```

    Where:
    * `CLOUD-FOUNDRY-SPACE-ENTITLEMENT-NAME` is a name you choose for the `CloudFoundrySpaceEntitlement` object.
    * `PROJECT-NAME` is the name of the project receiving access to the space.
    * `CLOUD-FOUNDRY-NAME` is the name of the Cloud Foundry deployment that contains the space to which you are granting access.
    * `ORG-NAME` is the name of the org that contains the space to which you are granting access.
    * `SPACE-NAME` is the name of the space to which you are granting access.

1. Apply the configuration by running:

    ```
      kubectl create -f cf-space-entitlement.yaml
    ```

## <a id='register-broker'></a> Register a Broker

You can register any Open Service Broker API (OSBAPI)-compliant brokers with the
<%= vars.product_short %> CLI tool.

<p class="note">
  <strong>Note:</strong> Ensure your broker name is under 64 characters.
  You cannot create service instances for a broker registered with a name longer than 63 characters.
</p>

1. Register the broker by running:

    ```
    pdc broker register \
      --name=BROKER-NAME \
      --url=BROKER-URL \
      --username=BROKER-USERNAME \
      --password=BROKER-PASSWORD
    ```

    Where:
    * `BROKER-NAME` is the name of the newly registered broker. Make it shorter than 64 characters.
    * `BROKER-URL` is the location of the broker API endpoint.
    * `BROKER-USERNAME` is the username by which <%= vars.product_short %> authenticates with the broker.
    * `BROKER-PASSWORD` is the password by which <%= vars.product_short %> authenticates with the broker.

1. Verify that the broker was registered by running:

    ```
    pdc broker list
    ```

    This returns a list of registered brokers, as in the example below:

    <pre class="terminal">
    $ pdc broker list
    NAME          URL          STATUS    CREATED AT
    BROKER-NAME   BROKER-URL   created   2019-02-31 12:00:00 +0000 GMT
    </pre>

## <a id='examine-broker'></a> (Optional) Examine a Broker

To examine a specific broker:

1. Run:

    ```
    pdc broker get --name=BROKER-NAME
    ```

    For example:

    <pre class="terminal">
    $ pdc broker get --name=my-broker
    createdAt: 2019-02-31 12:00:00 +0000 GMT
    name: my-broker
    status:
      message: Successfully fetched catalog entries from broker.
      state: created
    </pre>

## <a id="feedback"></a> Feedback

<%= partial vars.path_to_partials + '/developer-console/alpha-feedback' %>
