---
title: Using Pivotal Developer Console to Provision Services
owner: Marketplace
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %> (PDC) to provision services within a `Project` for use with applications deployed on multiple platforms.

## <a id='selecting-project'></a> Selecting a Project

Before provisioning or accessing details for any PDC service instances you must select a `Project` that you have access to. For more details on `Projects` see [What is a Project?](using-providing.html#project-definition).

<p class="note"><b>Note</b>: Instances and bindings you create when using one project will not be visible when using another.</p>

A `Project` can be selected using the command `pdc project use` as follows:
<p class="terminal">
$ pdc project use --name=PROJECT-NAME
Using project 'PROJECT-NAME'.
</p>

Where: `PROJECT-NAME` is the name for the project you want to use.

## <a id='creating-instance'></a> Creating a Service Instance

You can create a instance of an service instance if there is an appropriate broker present that provides the service. You can see which services are available by using the command `pdc service list`.

<p class="terminal">
$ pdc service list
SERVICE        PLANS          BROKER             DESCRIPTION
SERVICE-NAME   large, small   SERVICE-BROKER     Some description about the service provided.
</p>

* `SERVICE-NAME` is the name of the available service
* `SERVICE-BROKER` is the name of the broker which provides the service

You can then create an instance of a given service by using the following `pdc` command:

<p class="terminal">
$ pdc instance create --name=INSTANCE-NAME --service=SERVICE-NAME --plan=SERVICE-PLAN --broker=BROKER-NAME
</p>

Where:

* `INSTANCE-NAME` is the name of the service instance to be created
* `SERVICE-NAME` is the name of the service type
* `SERVICE-PLAN` is the plan which you want to configure your instance with
* `BROKER-NAME` is the name of the broker that provides the service

You can examine the current service instances by using the command `pdc instance list` which will return a list of the current service instances in your project, their type, plan and status, in the form:

<p class="terminal">
$ pdc instance list
NAME            SERVICE        PLAN           BROKER          STATUS    CREATED AT
INSTANCE-NAME   SERVICE-NAME   SERVICE-PLAN   BROKER-NAME     created   2019-02-31 12:00:00 +0000 GMT
</p>

Individual instances can then be further examined with:

<p class="terminal">
$ pdc instance get --name=INSTANCE-NAME
broker: BROKER-NAME
createdAt: 2019-02-31 12:00:00 +0000 GMT
name: INSTANCE-NAME
plan: SERVICE-PLAN
service: SERVICE-NAME
status:
  message: The instance was provisioned successfully
  state: created
</p>

## <a id='getting-access-instance'></a> Getting Access to a Service Instance

You can then create a binding for a given instance by using the following `pdc` command:

<p class="terminal">
$ pdc binding create --name=BINDING-NAME --instance=INSTANCE-NAME
</p>

Where:

* `BINDING-NAME` is the name to give the binding
* `INSTANCE-NAME` is the name of the service instance you are creating a binding for

You can examine all bindings by using the command `pdc binding list` which will return a list of all bindings in your project, the instance they are for and status, in the form:

<p class="terminal">
$ pdc binding list
NAME           INSTANCE            STATUS    CREATED AT
BINDING-NAME   INSTANCE-NAME       created   2019-02-31 12:00:00 +0000 GMT
</p>

To get the credentials needed to access the service instance, an individual binding can be examined with the command `pdc binding get` as follows:

<p class="terminal">
$ pdc binding get --name=BINDING-NAME
broker: BROKER-NAME
createdAt: 2019-11-20 15:57:00 +0000 GMT
credentials:
  password: PASSWORD
  username: USERNAME
instance: INSTANCE-NAME
name: BINDING-NAME
plan: SERIVCE-PLAN
service: SERVICE-NAME
status:
  message: Injected bind result
  state: created
</p>

<p class="note"><b>Note</b>: The exact form of the <code>credentials</code> block will vary from service to service depending on what is required to access the service.</p>

<p class="note"><b>Note</b>: Currently binding details are stored as Kubernetes secrets and so can alternatively be accessed via the Kubernetes API, including via <code>kubectl</code>.</p>
