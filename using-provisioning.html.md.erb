---
title: Using Developer Console to Provision Services
owner: Marketplace
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %>
to provision services within a project for use with apps deployed on multiple runtime environments.

## <a id='select-project'></a> Select a Project

Before provisioning or accessing details for any <%= vars.product_short %> service instances you must
select a project that you can access.
For more information about projects, see [Overview](using-providing.html#overview).

<p class="note">
  <strong>Note:</strong> Instances and bindings that you create when using one project are not
  visible when using another project.
</p>

1. See the projects you have access to by running:

    ```
    pdc project list
    ```

1. Select a project by running:

    ```
    pdc project use --name=PROJECT-NAME
    ```

    Where `PROJECT-NAME` is the name of your project.<br><br>

    For example:

    <pre class="terminal">
    $ pdc project use --name=my-project
    Using project 'my-project'.
    </pre>

## <a id='create-instance'></a> Create a Service Instance

You can create a service instance if there is an appropriate broker present that provides the service.

To create a service instance:

1. Find the necessary service and broker by running:

    ```
    pdc service list
    ```

    For example:

    <pre class="terminal">
    $ pdc service list
    SERVICE        PLANS          BROKER             DESCRIPTION
    mysql          large, small   my-broker          Production grade MySQL service
    </pre>

    This command lists all available services with their brokers.

1. Create a service instance by running:

    ```
    pdc instance create --name=INSTANCE-NAME --service=SERVICE-NAME --plan=SERVICE-PLAN --broker=BROKER-NAME [--parameters=PARAMETERS-AS-JSON]
    ```

    Where:
    * `INSTANCE-NAME` is the name of the service instance you want to create
    * `SERVICE-NAME` is the name of the service
    * `SERVICE-PLAN` is the plan that you use to configure your instance
    * `BROKER-NAME` is the name of the broker that provides the service
    * `PARAMETERS-AS-JSON` are optional service-specific configuration parameters in a valid JSON object


1. (Optional) View existing service instances and their number of bindings by running:

    ```
    pdc instance list
    ```

    For example:

    <pre class="terminal">
    $ pdc instance list
    NAME            SERVICE        PLAN           BROKER          BINDINGS       STATUS    CREATED AT
    my-instance     mysql          small          my-broker       3              created   2019-02-31 12:00:00 +0000 GMT
    </pre>

## <a id='examine-broker'></a> Examine an Instance

To examine a specific instance:

1. Run:

    ```
    pdc instance get --name=INSTANCE-NAME
    ```

    For example:

    <pre class="terminal">
    $ pdc instance get --name=my-instance
    broker: my-broker
    createdAt: 2019-02-31 12:00:00 +0000 GMT
    name: my-instance
    plan: small
    service: mysql
    status:
      message: The instance was provisioned successfully
      state: created
    </pre>

## <a id='access-instance'></a> Access a Service Instance

This procedure explains how to obtain credentials and connection information for a service instance
in order to use it.

To access a service instance:

1. Create a binding for the instance by running:

    ```
    pdc binding create --name=BINDING-NAME --instance=INSTANCE-NAME [--parameters=PARAMETERS-AS-JSON]
    ```

    Where:
    * `BINDING-NAME` is the name you give the binding
    * `INSTANCE-NAME` is the name of the service instance you are binding
    * `PARAMETERS-AS-JSON` are optional service-specific configuration parameters in a valid JSON object

1. (Optional) List all bindings by running:

    ```
    pdc binding list
    ```

    For example:

    <pre class="terminal">
    $ pdc binding list
    NAME           INSTANCE            STATUS    CREATED AT
    my-binding     my-instance         created   2019-02-31 12:00:00 +0000 GMT
    </pre>

1. Get the credentials from the binding that are needed to access the service instance:

    ```
    pdc binding get --name=BINDING-NAME
    ```

    For example:

    <pre class="terminal">
    $ pdc binding get --name=my-binding
    broker: my-broker
    createdAt: 2019-11-20 15:57:00 +0000 GMT
    credentials:
      password: my-password
      username: my-username
      host: example.com
      port: 3306
    instance: my-instance
    name: my-binding
    plan: small
    service: mysql
    status:
      message: Injected bind result
      state: created
    </pre>

    <p class="note">
      <strong>Note:</strong> The exact form of the <code>credentials</code> block varies from service
      to service depending on what is required to access the service.
    </p>

    <p class="note">
      <strong>Note:</strong> Currently binding details are stored as Kubernetes secrets so that you
      can also access them through the Kubernetes API and kubectl.
    </p>

## <a id='bind-instance-to-cf'></a> Bind a Service Instance to an App That Runs in Cloud Foundry

To bind credentials and connection information for a service instance to an app that is running in
Cloud Foundry:

1. Check that the Cloud Foundry deployment has been registered with <%= vars.product_short %> by
running:

    ```
    pdc cloudfoundry list
    ```

    For example:

    <pre class="terminal">
    $ pdc cloudfoundry list
    NAME           API
    my-cf          https://api.sys.my-cf.example.com
    </pre>

1. Record the <code>NAME</code> that corresponds to the <code>API</code> of the Cloud Foundry
deployment in which your app is running. You need it when you create the binding.

1. Create a binding between the instance and your Cloud Foundry app by running:

    ```
    pdc binding create --name=BINDING-NAME --instance=INSTANCE-NAME --app=CF-NAME/ORG-NAME/SPACE-NAME/APP-NAME [--parameters=PARAMETERS-AS-JSON]
    ```

    Where:
    * `BINDING-NAME` is the name you give the binding
    * `INSTANCE-NAME` is the name of the service instance you are binding
    * `CF-NAME` is the name of the Cloud Foundry deployment as identified earlier in the procedure
    * `ORG-NAME` is the name of the Cloud Foundry org your app is running in
    * `SPACE-NAME` is the name of the Cloud Foundry space your app is running in
    * `APP-NAME` is the name of your Cloud Foundry app
    * `PARAMETERS-AS-JSON` are optional service-specific configuration parameters in a valid JSON object

    <p class="note">
      <strong>Note:</strong> If the app name and the binding name combined have more than 49
      characters, binding to a Cloud Foundry app fails.
    </p>

1. The binding credentials and connection information are now available to your Cloud Foundry app
through the `VCAP_SERVICES` environment variable as a `user-provided` service.

## <a id="feedback"></a> Feedback

<%= partial vars.path_to_partials + '/developer-console/alpha-feedback' %>
