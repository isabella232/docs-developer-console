---
title: Installing and Configuring Developer Console
owner: Marketplace
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure <%= vars.product_full %>.

## <a id='overview'></a> Overview

<%= vars.product_short %> consists of a front end command line interface (CLI) named
<%= vars.product_short %> CLI and a backing set of custom resource definitions (CRDs) and custom
controllers.

To install and configure <%= vars.product_short %>:

1. Meet the [Prerequisites](#prereqs)
1. [Verify That You Can Access the Tanzu Network Registry](#verify-docker-access)
1. [Create a Cloud Foundry UAA Client](#create-cf-uaa-client)
1. [Install the <%= vars.product_short %>](#install-developer-console)
1. [Install the <%= vars.product_short %> CLI Tool](#install-cli), which is needed for operating
<%= vars.product_short %>.

## <a id='prereqs'></a> Prerequisites

* **kubectl:** For installation instructions, see the [Kubernetes documentation](https://kubernetes.io/docs/tasks/tools/install-kubectl/).
* **The Docker CLI:** For installation instructions, see the [Docker documentation](https://docs.docker.com/install/).
* **ytt** For templating, see the [ytt documentation](https://get-ytt.io/)
* **kapp** For deploying the <%= vars.product_short %>, see the [kapp documentation](https://get-kapp.io/)
* **kbld** For image orchestration and registry operations, see the [kbld documentation](https://get-kbld.io/)
* Access to the Tanzu Network Registry: For more information, see
[Verify Your Access to the Tanzu Network Registry](#verify-docker-access) below.

## <a id='verify-docker-access'></a> Verify That You Can Access the Tanzu Network Registry

To verify that you have access to the Tanzu Network registry:

1. Log in to the registry by running:

    ```
    docker login registry.pivotal.io
    ```

1. At the username prompt, enter the email address associated with your <%= vars.product_network %>
account.

1. At the password prompt, enter your <%= vars.product_network %> account password.

1. Pull the registry by running:

    ```
    docker pull registry.pivotal.io/developer-console/cf-service-bridge:CF-SERVICE-BRIDGE-VERSION-NUMBER
    ```

    Where `CF-SERVICE-BRIDGE-VERSION-NUMBER` is the image version in <%= vars.product_network %>.
    For example, `0.2.0-build.1`.<br><br>

## <a id='create-cf-uaa-client'></a> Create a Cloud Foundry UAA Client

<p class="note">
  <strong>Note:</strong> This procedure is only required to bind service instances to apps running
  in Cloud Foundry. It must be repeated for each Cloud Foundry deployment that you want to make
  available to <%= vars.product_short %>.
</p>

To create the required User Account and Authentication (UAA) client:

<%# The following steps are generic and have been copied from https://docs.pivotal.io/pks/1-6/manage-users.html %>

1. In a web browser, navigate to the **<%= vars.ops_manager %> Installation Dashboard** and click the
**<%= vars.app_runtime_full %>** tile.

1. Click the **Credentials** tab.

1. Click **Link to Credential** next to **Admin Client Credentials** and copy the `password` value.

1. Target the Cloud Foundry UAA server by running:

    ```
    uaac target https://UAA-ENDPOINT --ca-cert CERTIFICATE-PATH
    ```

    Where:
    * `UAA-ENDPOINT` is the URL of the Cloud Foundry UAA server.
    * `CERTIFICATE-PATH` is the path to your <%= vars.ops_manager %> root Certificate Authority (CA)
    certificate. If you are logged in to the <%= vars.ops_manager %> VM, specify
    `/var/tempest/workspaces/default/root_ca_certificate` as the path. This is the default location
    of the root certificate on the <%= vars.ops_manager %> VM. If you downloaded the
    <%= vars.ops_manager %> root CA certificate to your local machine, specify the path where you
    stored the certificate.

1. Authenticate with UAA by running:

    ```
    uaac token client get admin -s ADMIN-CLIENT-SECRET
    ```

    Where `ADMIN-CLIENT-SECRET` is your UAA management admin client secret that you retrieved earlier
    in this procedure. `admin` is the client username.

<%# The following steps are specific %>

1. Create an admin client for <%= vars.product_short %> by running:

    ```
    uaac client add developerconsole -s CLIENT-SECRET --authorized_grant_types client_credentials --authorities cloud_controller.admin
    ```

    Where `CLIENT-SECRET` is a secret of your choice. Keep this secret safe.
    It is required when using <%= vars.product_short %>.

## <a id='install-developer-console'></a> Install the <%= vars.product_short %>

To install the <%= vars.product_short %>:

1. Create a file called `values.yaml` anywhere on your local machine with the contents below:

    ```
    cf-service-bridge:
      imagePullSecrets:
      - name: REGISTRY-SECRET-NAME
    projects-operator:
      imagePullSecrets:
      - name: REGISTRY-SECRET-NAME
    ```

    Where `REGISTRY-SECRET-NAME` is the name of a Kubernetes secret containing the registry credentials.

1. **Ensure the <%= vars.product_short %> images are accessible:**

  1. If the cluster you are deploying to does not have access to the default registry, relocate the
  used images to the custom registry by setting the following environment variables:
  <%# Where and how? Are these key-value pairs for values.yaml? kapp-deploy? We could do with an example. %>

    ```
    REGISTRY_HOSTNAME # For example, "gcr.io" or "my.harbor.com". <%# Is it really HOSTNAME, not HOST? %>
    REGISTRY_PROJECT  # For example, "dev" or "my-team-project".
    REGISTRY_USERNAME
    REGISTRY_PASSWORD
    PDC_BROKER_USERNAME
    PDC_BROKER_PASSWORD
    ```

  1. Apply the environment variables by running:

    ``` <%# Where and when do you run this? %>
    ./scripts/kbld-custom-relocate
    CUSTOM_KBLD_FLAGS="-f ./build/relocation.lock.copied" ./scripts/kapp-deploy
    ```

  1. If you have relocated the <%= vars.product_short %> images, append the snippet below to
  `values.yaml`:

    ```
    global:
      imageRegistry: REGISTRY-HOST
      imageNamespace: REGISTRY-NAMESPACE

    catalog:
      image: REGISTRY-HOST/REGISTRY-NAMESPACE/service-catalalog:v0.3.0
    ```

    Where:
    * `REGISTRY-HOST` is the host of the registry that the images were relocated to
    * `REGISTRY-NAMESPACE` is the namespace of the registry that the images were relocated to

  <p class="note">
    <strong>Note:</strong> This step assumes that all the <%= vars.product_short %> images were
    relocated to the same namespace.
  </p>

1. Create a namespace for the installation:

    ```
    kubectl create namespace pdc-system
    ```

1. Install the <%= vars.product_short %>


## <a id="install-cli"></a> Install the <%= vars.product_short %> CLI Tool

To install the <%= vars.product_short %> CLI tool:

1. Log in to your Early Access user account on [<%= vars.product_network %>](https://login.run.pivotal.io/login).
If you do not have an Early Access account, please email
<a href="mailto:pdc-feedback@pivotal.io"><%= vars.product_short %> Feedback</a> to request one.
<%= vars.product_short %> is currently only available to Early Access users.

1. Download the <%= vars.product_short %> tarball files to your working directory from
[<%= vars.product_network %>](https://network.pivotal.io/products/developer-console/).

<%# Ask the engineers if the journey I just took through login.run.pivotal.io/login is what a
customer sees who is not an early adopter.
Regular customers (non-early adopters) need to find it obvious that they aren't early adopters and
cannot access the tarball files. %>

<%# Get a direct link to the tarball files at some point. It will only work for early adopters,
though, for the foreseeable future. %>

1. Untar the `pdc` tarball and choose the appropriate binary CLI tool for your operating system.

1. Make the chosen <%= vars.product_short %> CLI tool executable by running:

    ```
    chmod +x pdc
    ```

1. Move this <%= vars.product_short %> CLI tool to somewhere within your system path such as
`/usr/local/bin/pdc`.

## <a id="feedback"></a> Feedback

<%= partial vars.path_to_partials + '/developer-console/alpha-feedback' %>
